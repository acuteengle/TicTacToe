{"version":3,"sources":["components/Tile.jsx","components/TicTacToe.jsx","App.js","serviceWorker.js","index.js"],"names":["Radium","props","value","index","handleClick","xColor","oColor","style","tile","width","height","display","flexDirection","justifyContent","alignItems","border","boxSizing","cursor","backgroundColor","text","fontSize","color","onClick","startingBoard","rows","columns","diagonals","TicTacToe","useState","board","setBoard","xMove","setXMove","continueGame","setContinueGame","winner","setWinner","xWins","setXWins","oWins","setOWins","handleTileClick","event","console","log","newBoard","isInitialMount","useRef","useEffect","current","r","every","checkRows","c","checkColumns","d","checkDiagonals","b","canvas","flexWrap","scoreboard","displayText","map","key","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9b1bf50.chunk.js","sourcesContent":["import React from \"react\";\nimport Radium from \"radium\";\n\nconst Tile = (props) => {\n  const { value, index, handleClick, xColor, oColor } = props;\n\n  //   https://colorhunt.co/palette/201413\n  const style = {\n    tile: {\n      width: \"33%\",\n      height: \"33%\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      border: \"1px solid black\",\n      boxSizing: \"initial\",\n      \":hover\":\n        value === \"\"\n          ? {\n              cursor: \"pointer\",\n              backgroundColor: \"#4e89ae\",\n            }\n          : {},\n    },\n    text: {\n      fontSize: 60,\n      color: value === \"X\" ? xColor : oColor,\n    },\n  };\n\n  return (\n    <div style={style.tile} onClick={handleClick ? handleClick(index) : null}>\n      <span style={style.text}>{value}</span>\n    </div>\n  );\n};\n\nexport default Radium(Tile);\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Tile from \"./Tile\";\n\nconst startingBoard = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\nconst rows = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n];\n\nconst columns = [\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n];\n\nconst diagonals = [\n  [0, 4, 8],\n  [6, 4, 2],\n];\n\nconst backgroundColor = \"#43658b\";\nconst xColor = \"#ed6663\";\nconst oColor = \"#ffa372\";\n\nconst TicTacToe = () => {\n  const [board, setBoard] = useState(startingBoard);\n  const [xMove, setXMove] = useState(true);\n  const [continueGame, setContinueGame] = useState(true);\n  const [winner, setWinner] = useState(\"\");\n  const [xWins, setXWins] = useState(0);\n  const [oWins, setOWins] = useState(0);\n\n  const checkRows = () => {\n    for (const r of rows) {\n      if (\n        r.every((index) => board[index] !== \"\" && board[index] === board[r[0]])\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const checkColumns = () => {\n    for (const c of columns) {\n      if (\n        c.every((index) => board[index] !== \"\" && board[index] === board[c[0]])\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const checkDiagonals = () => {\n    for (const d of diagonals) {\n      if (\n        d.every((index) => board[index] !== \"\" && board[index] === board[d[0]])\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const checkAllSpacesTaken = () => {\n    if (board.every((b) => b !== \"\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleTileClick = (index) => (event) => {\n    if (board[index] !== \"\") {\n      return;\n    }\n    console.log(index);\n    let newBoard = [...board];\n    newBoard[index] = xMove ? \"X\" : \"O\";\n    setBoard(newBoard);\n  };\n\n  const handleButtonClick = (event) => {\n    setContinueGame(true);\n    setWinner(\"\");\n    setBoard(startingBoard);\n  };\n\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (checkRows() || checkColumns() || checkDiagonals()) {\n        setContinueGame(false);\n        setWinner(xMove ? \"X\" : \"O\");\n        if (xMove) {\n          setXWins(xWins + 1);\n        } else {\n          setOWins(oWins + 1);\n        }\n      } else if (checkAllSpacesTaken()) {\n        setContinueGame(false);\n      } else {\n        setXMove(!xMove);\n      }\n    }\n  }, [board]);\n\n  const style = {\n    canvas: {\n      height: \"100%\",\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    board: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      width: 600,\n      height: 600,\n      backgroundColor: backgroundColor,\n    },\n    scoreboard: {\n      width: \"30%\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n    },\n  };\n\n  const tie = !continueGame && winner === \"\";\n\n  let displayText = \"\";\n  if (continueGame) {\n    displayText = xMove ? \"X's move\" : \"O's move\";\n  } else if (winner === \"\") {\n    displayText = \"It's a tie\";\n  } else {\n    displayText = winner + \" Wins!\";\n  }\n\n  return (\n    <div style={style.canvas}>\n      <h1>{displayText}</h1>\n      <div style={style.board}>\n        {board.map((value, index) => {\n          return (\n            <Tile\n              key={index}\n              value={value}\n              index={index}\n              handleClick={continueGame ? handleTileClick : null}\n              xColor={xColor}\n              oColor={oColor}\n            />\n          );\n        })}\n      </div>\n      <button onClick={handleButtonClick} className=\"btn btn-dark m-3\">\n        New Game\n      </button>\n      <h2>Win Counter:</h2>\n      {\n        <div style={style.scoreboard}>\n          <h4>\n            <b style={{ color: xColor }}>X:</b> {xWins}\n          </h4>\n          <h4>\n            <b style={{ color: oColor }}>O:</b> {oWins}\n          </h4>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","import React from 'react';\nimport TicTacToe from './components/TicTacToe';\n\nfunction App() {\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}